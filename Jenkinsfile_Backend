pipeline {
 
  
  stages {

 stage('EMPLOYEE-API - Checkout code') {
      steps {
        git url:'https://github.com/Hajer-DR/employee-api.git', branch:'main'
      }
    }

  stage('EMPLOYEE-API - CI - Build and Test') {
  
  
   parallel {
    stage('Compile') {
     
     steps {
      sh ' mvn clean compile'
	  sh 'mvn package -DskipTests=true'
     }
    }
	
	
  stage('Unit Tests') {

   steps {
    
    sh 'mvn  install '

   }

  }

 }
} 

  stage('EMPLOYEE-API - CI') {

   parallel {
   

    stage('JavaDoc') {

     steps {
      sh ' mvn javadoc:javadoc'
      step([$class: 'JavadocArchiver', javadocDir: './target/site/apidocs', keepAll: 'true'])
     }
    }
	
	
    stage('SonarQube') {

     steps {
      sh " mvn sonar:sonar -Dsonar.host.url=$SONARQUBE_URL:$SONARQUBE_PORT"
     }
    
  } 
  
     stage('Deploy Artifact To S3') {

   steps {
   
   withAWS(region:'us-east-2',credentials:'aws-creds') {
   sh 'aws --version'
  // sh "if (! aws s3api head-bucket --bucket 'devops-project2' 2>/dev/null) ; then aws s3 mb s3://devops-project2 ; fi"
   sh "aws s3 cp target/*.jar s3://devops-project2"
   
    }}
  }	
  

	
	stage('Publish API image to DockerHUB') {
            environment {
                registryCredential = 'dockerhub'
            }
            steps{
                script {

                    def appimage = docker.build registry + ":$BUILD_NUMBER"
                    docker.withRegistry( '', registryCredential ) {
                        appimage.push()
                        appimage.push('latest')
                    }
                }
            }
        }  
  
  }}
  


         stage('DEPLOY TO PREPROD'){
            steps {
                withAWS(region:'us-west-1',credentials:'aws-creds') {
                    sh 'aws eks --region us-west-1 update-kubeconfig --name my-eks'   
                    //sh 'kubectl create namespace preprod --dry-run -o yaml | kubectl apply -f - '
                    sh 'kubectl delete -f deployment-API-POD.yml --namespace=preprod --ignore-not-found=true'
                    sh 'kubectl apply -f deployment-API-All.yml --namespace=preprod'
                }
            }
        }
		
		
		/*         stage('DEPLOY TO PROD'){
            steps {
                withAWS(region:'us-east-2',credentials:'aws-creds') {
				  git url:'https://github.com/Narjesse/devOpsaws.git', branch:'main'
                    sh 'aws eks --region us-east-2 update-kubeconfig --name my-eks'   
                    sh 'kubectl create namespace prod --dry-run -o yaml | kubectl apply -f - '
                    sh 'kubectl delete -f deployment-API-POD.yml --namespace=prod --ignore-not-found=true'
                    sh 'kubectl apply -f deployment-API-All.yml --namespace=prod'
                }
            }
        }*/
        

 }
 
}
